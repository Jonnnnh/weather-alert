services:
  rabbitmq_service:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  weather-service:
    build:
      context: ./weather-service
      dockerfile: Dockerfile
    container_name: weatherservice
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres_weather_service:5433/weather_service_db"
      DATABASE_USERNAME: "postgres"
      DATABASE_PASSWORD: "pass"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "create"
      WEATHER_API_KEY: "${WEATHER_API_KEY}"
      WEATHER_API_HOST: "${WEATHER_API_HOST}"
      WEATHER_API_ENDPOINT: "${WEATHER_API_ENDPOINT}"
      SPRING_PROFILES_ACTIVE: "prod"
    env_file:
      - .env
    ports:
      - "8082:8082"
    depends_on:
      - rabbitmq_service
      - postgres_weather_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      retries: 5

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: userservice
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres_user_service:5432/user_service_db"
      DATABASE_USERNAME: "postgres"
      DATABASE_PASSWORD: "pass"
      GRPC_SERVER_PORT: "9090"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "create"
      SPRING_PROFILES_ACTIVE: "prod"
    ports:
      - "8081:8081"
    depends_on:
      - rabbitmq_service
      - postgres_user_service
      - weather-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      retries: 5

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot
    environment:
      TOKEN: "${TOKEN}"
      GRPC_CLIENT_POST_SERVICE_ADDRESS: "userservice:9090"
      SPRING_PROFILES_ACTIVE: "prod"
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - weather-service
      - rabbitmq_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      retries: 5

  postgres_user_service:
    image: postgres:latest
    container_name: user_service_db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "pass"
      POSTGRES_DB: "user_service_db"
    ports:
      - "5432:5432"
    volumes:
      - user-service-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "user_service_db"]
      interval: 30s
      retries: 5

  postgres_weather_service:
    image: postgres:latest
    container_name: weather_service_db
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "pass"
      POSTGRES_DB: "weather_service_db"
      PGPORT: 5433
    ports:
      - "5433:5433"
    volumes:
      - weather-service-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "weather_service_db"]
      interval: 30s
      retries: 5

volumes:
  user-service-db-data:
  weather-service-db-data:
